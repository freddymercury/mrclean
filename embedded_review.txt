# Code Review with Embedded Comments

```diff
diff --git a/src/app/layout.tsx b/src/app/layout.tsx
index f7fa87e..2ce3434 100644
--- a/src/app/layout.tsx
+++ b/src/app/layout.tsx
@@ -13,8 +13,8 @@ const geistMono = Geist_Mono({
 });
 
 export const metadata: Metadata = {
-  title: "Create Next App",
-  description: "Generated by create next app",
+  title: "Git Diff Code Review App",
+  description: "AI-powered code review for git diffs",
+  // Good update: More descriptive title and description that accurately reflect the application's purpose
 };
 
 export default function RootLayout({
diff --git a/src/app/page.tsx b/src/app/page.tsx
index 3eee014..3caee33 100644
--- a/src/app/page.tsx
+++ b/src/app/page.tsx
@@ -1,101 +1,98 @@
-import Image from "next/image";
+"use client";
+// Good practice: Properly marking this as a client component for Next.js
+
+import { useState, useEffect } from 'react';
+import DiffInput from '@/components/DiffInput';
+import DirectiveInput from '@/components/DirectiveInput';
+import ReviewOutput from '@/components/ReviewOutput';
+import ConfigPanel from '@/components/ConfigPanel';
+import { generateCodeReview } from '@/services/llmService';
+import { LLMConfig, GitDiffInput, ReviewDirective, CodeReviewResult } from '@/types';
+// Good organization: Clean imports with clear component separation
 
 export default function Home() {
+  const [diffContent, setDiffContent] = useState<string>('');
+  const [directive, setDirective] = useState<string>('');
+  const [reviewResult, setReviewResult] = useState<string>('');
+  const [isLoading, setIsLoading] = useState<boolean>(false);
+  const [llmConfig, setLlmConfig] = useState<LLMConfig>({
+    provider: 'openai',
+    apiKey: '',
+    model: ''
+  });
+  // Good use of TypeScript for state variables with appropriate typing
+
+  // Load default config from environment variables on client side
+  useEffect(() => {
+    // Next.js public environment variables (those prefixed with NEXT_PUBLIC_)
+    // would be available here, but we're using server-side env vars for security
+    // The API keys will be handled by the server-side code
+    setLlmConfig(prevConfig => ({
+      ...prevConfig,
+      provider: 'openai', // We're only supporting OpenAI in the API route for now
+      model: ''
+    }));
+  }, []);
+  // Security concern: Be cautious about accessing environment variables on the client side.
+  // Verify that sensitive information like API keys is handled server-side only.
+
+  const handleDiffSubmit = (diff: string) => {
+    setDiffContent(diff);
+    if (diff) {
+      generateReview();
+    }
+  };
+  // Code duplication: This pattern of checking diffContent and calling generateReview()
+  // appears in multiple handlers. Consider extracting to a helper function.
+
+  const handleDirectiveSubmit = (newDirective: string) => {
+    setDirective(newDirective);
+    if (diffContent) {
+      generateReview();
+    }
+  };
+
+  const handleConfigChange = (config: LLMConfig) => {
+    setLlmConfig(config);
+    if (diffContent) {
+      generateReview();
+    }
+  };
+
+  const generateReview = async () => {
+    if (!diffContent) {
+      return;
+    }
+    // Naming suggestion: Consider renaming to fetchReview to better indicate
+    // that it involves an asynchronous fetch operation
+
+    setIsLoading(true);
+    // UX suggestion: Consider adding loading indicators or disabling inputs/buttons
+    // when isLoading is true to prevent multiple submissions
+    try {
+      const diffInput: GitDiffInput = { diffContent };
+      const directiveInput: ReviewDirective | undefined = directive ? { directive } : undefined;
+      
+      const result = await generateCodeReview(llmConfig, diffInput, directiveInput);
+      setReviewResult(result.markdown);
+    } catch (error) {
+      console.error('Error generating review:', error);
+      setReviewResult(`Error generating review: ${error instanceof Error ? error.message : 'Unknown error'}`);
+      // Error handling improvement: Consider implementing more specific error handling
+      // to differentiate between network issues, server validation errors, etc.
+      // Also consider a more user-friendly error display mechanism for production.
+    } finally {
+      setIsLoading(false);
+    }
+  };
+
+  return (
+    <div className="min-h-screen bg-gray-50">
+      <div className="container mx-auto py-8 px-4">
+        <header className="mb-8">
+          <h1 className="text-3xl font-bold mb-2">Git Diff Code Review</h1>
+          <p className="text-gray-600">
+            Paste a git diff and get an AI-powered code review with inline comments.
+          </p>
+        </header>
+        // Good UI structure: Clear header with descriptive text
+
+        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
+          <div>
+            <ConfigPanel onConfigChange={handleConfigChange} currentConfig={llmConfig} />
+            <DiffInput onDiffSubmit={handleDiffSubmit} />
+            <DirectiveInput onDirectiveSubmit={handleDirectiveSubmit} />
+          </div>
+          <div>
+            <ReviewOutput markdown={reviewResult} isLoading={isLoading} />
+          </div>
+        </div>
+        // UI suggestion: Good component separation with logical grouping
+        // Consider component-specific CSS or styled-components for better code management
+      </div>
+    </div>
+  );
+  // Overall: Clean, well-structured component with good separation of concerns
 }
```

## Summary of Key Improvements

1. **Security Enhancements:**
   - Ensure API keys are handled server-side only, not exposed to client
   - Verify environment variable usage follows security best practices

2. **Code Organization:**
   - Extract repeated logic into helper functions
   - Consider renaming `generateReview` to `fetchReview` for clarity

3. **Error Handling:**
   - Implement more specific error handling for different error types
   - Add user-friendly error messages beyond console logging

4. **UI/UX Improvements:**
   - Add loading indicators or disable inputs during API calls
   - Consider debouncing or throttling for rapid input changes

5. **TypeScript Usage:**
   - Good use of TypeScript types throughout the component
   - Continue using interfaces/types for props to ensure type safety
